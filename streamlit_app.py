import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from PIL import Image

# Configuration de la page
st.set_page_config(
    page_title="Fashion MNIST Classifier",
    page_icon="üëó",
    layout="wide"
)

# Titre et description am√©lior√©s
st.title("üîÆ Fashion MNIST Classifier")
st.markdown("""
**Classifiez des images de v√™tements avec nos mod√®les de Deep Learning!**
- üß¶ Mod√®le Dense: R√©seau de neurones simple (pr√©cision ~90%)
- üåÄ Mod√®le CNN: R√©seau convolutif avanc√© (pr√©cision ~94%)
""")

# Chargement des nouveaux mod√®les avec gestion d'erreur


@st.cache_resource(show_spinner="Chargement du mod√®le Dense...")
def load_dense_model():
    try:
        return tf.keras.models.load_model('./models/fashion_mnist_dense_v2.h5')
    except Exception as e:
        st.error(f"Erreur de chargement du mod√®le Dense: {str(e)}")
        return None


@st.cache_resource(show_spinner="Chargement du mod√®le CNN...")
def load_cnn_model():
    try:
        return tf.keras.models.load_model('./models/fashion_mnist_cnn_v2.h5')
    except Exception as e:
        st.error(f"Erreur de chargement du mod√®le CNN: {str(e)}")
        return None

# Interface de chargement d'image am√©lior√©e


def load_image():
    col1, col2 = st.columns(2)
    with col1:
        uploaded_file = st.file_uploader(
            "T√©l√©versez une image de v√™tement (28x28px)",
            type=["png", "jpg", "jpeg"],
            key="uploader"
        )

    if uploaded_file is not None:
        try:
            image = Image.open(uploaded_file).convert('L')
            image = image.resize((28, 28))

            with col2:
                st.image(image, caption="Image t√©l√©vers√©e", width=200)
                st.write(f"Format: {image.size}, Mode: {image.mode}")

            return image
        except Exception as e:
            st.error(f"Erreur de traitement d'image: {str(e)}")
            return None

# Pr√©processing adaptatif selon le mod√®le


def preprocess_image(image, model_type):
    img_array = np.array(image)

    # Inversion des couleurs pour correspondre au dataset Fashion MNIST
    img_array = 255 - img_array  # Important!

    # Normalisation sp√©cifique au mod√®le
    if model_type == "Dense":
        img_array = img_array.astype('float32') / 255.0
    else:  # CNN g√®re la normalisation via couche Rescaling
        img_array = img_array.astype('float32')

    return img_array.reshape(1, 28, 28, 1)

# Visualisation des pr√©dictions am√©lior√©e


def plot_predictions(probs, classes):
    fig = plt.figure(figsize=(10, 4))
    ax = fig.add_subplot(111)

    # Barres color√©es par probabilit√©
    colors = plt.cm.viridis(probs * 0.8)
    bars = ax.bar(classes, probs, color=colors)

    # Annotation de la pr√©diction principale
    max_idx = np.argmax(probs)
    bars[max_idx].set_color('red')
    ax.text(max_idx, probs[max_idx]+0.02,
            f'{probs[max_idx]:.1%}',
            ha='center',
            color='darkred')

    plt.xticks(rotation=45)
    plt.ylim(0, 1.1)
    plt.title("Probabilit√©s de pr√©diction", pad=20)
    plt.ylabel("Confiance")
    plt.tight_layout()
    return fig

# Interface principale


def main():
    # Chargement des mod√®les
    dense_model = load_dense_model()
    cnn_model = load_cnn_model()

    # S√©lection du mod√®le
    model_type = st.radio(
        "Choisissez votre mod√®le:",
        ["Dense", "CNN"],
        horizontal=True,
        index=1
    )

    # Chargement d'image
    image = load_image()

    if image and st.button("üîé Lancer la pr√©diction"):
        with st.spinner("Analyse en cours..."):
            # Pr√©processing adaptatif
            processed_image = preprocess_image(image, model_type)

            # S√©lection du mod√®le
            model = dense_model if model_type == "Dense" else cnn_model

            if model:
                try:
                    preds = model.predict(processed_image, verbose=0)[0]
                    classes = ["T-shirt", "Pantalon", "Pull", "Robe",
                               "Manteau", "Sandale", "Chemise", "Basket", "Sac", "Botte"]

                    # Affichage des r√©sultats
                    st.success("Pr√©diction r√©ussie!")

                    col1, col2 = st.columns([1, 3])
                    with col1:
                        st.metric(
                            label="Classe pr√©dite",
                            value=classes[np.argmax(preds)],
                            delta=f"{np.max(preds):.1%} confiance"
                        )

                    with col2:
                        st.pyplot(plot_predictions(preds, classes))
                except Exception as e:
                    st.error(f"Erreur de pr√©diction: {str(e)}")


# Sidebar avec informations suppl√©mentaires
st.sidebar.markdown("## ‚ÑπÔ∏è √Ä propos")
st.sidebar.markdown("""
Cette application utilise des r√©seaux de neurones pour classifier des images de v√™tements selon 10 cat√©gories:

1. **Mod√®le Dense**  
   - Architecture simple de type perceptron multicouche
   - Pr√©cision: ~90%
   
2. **Mod√®le CNN**  
   - Architecture convolutive avanc√©e
   - Pr√©cision: ~94%
   
**Conseils d'utilisation:**
- Utilisez des images carr√©es (28x28px id√©al)
- Fond clair pour meilleure d√©tection
- Images contrast√©es
""")

# Footer
st.markdown("---")
st.markdown("""
<style>
.footer {
    text-align: center;
    padding: 1rem;
    color: #666;
}
</style>
<div class="footer">
    D√©velopp√© avec ‚ù§Ô∏è par [Freddy Nanji] | 
    <a href="https://github.com/freddynanji/fashion-mnist-classifier">Code source</a>
</div>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
